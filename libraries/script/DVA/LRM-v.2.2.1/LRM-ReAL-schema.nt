<http://xrce.xerox.com/LRM#LRM-ReAL-schema> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Ontology> .
<http://xrce.xerox.com/LRM#LRM-ReAL-schema> <http://www.w3.org/2002/07/owl#versionInfo> "1.0.0" .
<http://xrce.xerox.com/LRM#LRM-ReAL-schema> <http://www.w3.org/2000/01/rdf-schema#label> "LRM-ReAL-schema"@en .
<http://xrce.xerox.com/LRM#LRM-ReAL-schema> <http://www.w3.org/2000/01/rdf-schema#comment> "used to specify the dynamic behavior to maintain the consistency of the LRM representations (thus allowing the interpretion of changes)"@en .
<http://xrce.xerox.com/LRM#LRM-ReAL-schema> <http://www.w3.org/2000/01/rdf-schema#comment> "     \n        ReAL semantic (informal explaination):\n        \n        Let us say that T is a triple pattern(eg  T =  rdf:type(?s, owl:Class) )\n        \n        T  alone is TRUE if one or several matching instances of T can be found directly in the store ; \n        \n        -T same than T alone, but withdraw from the store all occurences matching T;  FALSE if no occurence of T can be found in the store,\n        \n        +T  means add T in the store (the triple pattern must be completely instanciated: all variables must be bound when the operation occurs);  is false if T is already in the store \n        \n        ++T  is equivalent to  (+T EITHER TRUE) :  like +T, but do not fails if T is already in the store\n        \n        !T  is true if the triple pattern T can be solved by inference in the current context(through the underlying backward chaining mechanism)\n                      \n        brackets [A]  denotes an transactional execution of action A: \n             if all binding of A (solution), the undertaken triple addition/deletion actions become effective in the current store; transactional actions may be embedded\n            \n         all instuctions can be articulated through order-sensitive and stream-oriented logical connectors (AND, UNION, NO, EITHER, ONE, REPEAT):\n                AND is an ordered product connector:  \n                        (T1 AND T2) returns all bindings for b(T2) for every binding b found when evaluating T1; therefore T2 is dependent on T1\n                        (T1 AND T2) will fail if the evaluation of T1 fails, or if all evaluations of b(T2) fails for all binding b returned by evaluating T1\n                UNION is an ordered inclusive-or connector:  \n                        (T1 UNION T2) returns all bindings for T1 and all bindings for T2; T2 is not dependent on T1 (T2 will not be affected by T1 bindings)\n                NO is a monadic connector:\n                        (NO T) return an empty binding if T has no solution; fails otherwise\n                EITHER is an ordered exclusive-or connector: \n                        (T1 EITHER T2) returns all bindings for T1, or all bindings for T2 if T1 has no solution (~ T1 evaluation fails)\n                FIRST, LAST are monadic connectors:\n                        (FIRST T) return the first binding found for T ; fails if T fails\n                        (LAST T) return the last binding found for T ; fails if T fails\n                REPEAT is a monadic connector:\n                        (REPEAT T) returns an empty binding if the evaluation of T return one or more solutions (all solutions for T will be explored) ; fails if T fails\n            \n            \n        example:            \n        \n            rdf:type(?s, lrm:Resource) AND   @primitive:timestamp(?c) AND   +time:modified(?s, ?c)            \n            \n        when evaluated in the store  { ex:a1 rdf:type lrm:Resource . ex:a2 rdf:type lrm:Resource .}\n        \n        will succeed and change the store into (time is only indicative):  \n            { \n            ex:a1 rdf:type lrm:Resource; lrm:modified \"2015-02-26T18:15:03.000Z\" . \n            ex:a2 rdf:type lrm:Resource; lrm:modified \"2015-02-26T18:15:03.001Z\" .\n            }               \n        "@en .
<http://xrce.xerox.com/STX#BTree> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/STX#btree> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/STX#btree> <http://www.w3.org/2000/01/rdf-schema#domain> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/STX#btree> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#Syntax> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/STX#grammar> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> .
<http://xrce.xerox.com/STX#grammar> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#grammar> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/STX#Grammar> .
<http://xrce.xerox.com/STX#axiom> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/STX#axiom> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://xrce.xerox.com/STX#provides> .
<http://xrce.xerox.com/STX#axiom> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#axiom> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#requires> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/STX#requires> <http://www.w3.org/2000/01/rdf-schema#comment> "G stx:requires 'A'  makes use of syntactic rules with shape 'A(?)\u21E8 ... '  or, in binary shape, all rules matching  [STX [A ?] ?]"@en .
<http://xrce.xerox.com/STX#requires> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#requires> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#provides> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/STX#provides> <http://www.w3.org/2000/01/rdf-schema#comment> "G stx:provides 'A'  makes visible all syntactic rules with shape 'A(?)\u21E8 ... '  or, in binary shape, all rules matching  [STX [A ?] ?]"@en .
<http://xrce.xerox.com/STX#provides> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#provides> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#example> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/STX#example> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#example> <http://www.w3.org/2000/01/rdf-schema#range> <http://www.w3.org/2001/XMLSchema#string> .
<http://xrce.xerox.com/STX#Grammar> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/STX#Grammar> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/STX#Grammar> <http://xrce.xerox.com/STX#btree> " [STX  [G [[STX ?x ] ?y]  ]  Space [STX ?x] Space '\n' [G ?y] NIL]"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#Grammar> <http://xrce.xerox.com/STX#btree> " [STX [G NIL] Space NIL]"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#Grammar> <http://xrce.xerox.com/STX#btree> " [STX [RegS ?x]  [REGEX [ '([^/]|(?<=\\/) )+' ?x] ] NIL]"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#Grammar> <http://xrce.xerox.com/STX#axiom> "G(?)"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/STX#Grammar> <http://xrce.xerox.com/STX#grammar> "\n        G([[STX ?x ] ?y] )  \u21E8   Space  STX(?x) Space  '\\n'  G(?y)\n        G(NIL)  \u21E8   Space\n        STX([[LHS ?x ]  ?y] )  \u21E8    LHS(?x) Space   '\u21E8'  Space  RHS(?y)\n         LHS(?x)   \u21E8    GCall(?x)  \n         LHS(?x) \u21E8    Token(?x)  \n        GCall([APPLY [ ?nm ?x ] ] ) \u21E8   Token(?nm) '(' Space Term(?x)Space  ')' \n         Token(?nm)  \u21E8   / [A-Za-z][A-Za-z_0-9]*/   :  ?nm\n         Term([?x ?y] )  \u21E8    '['  Space Term(?x) LTerm(?y) Space  ']'\n         LTerm([?x ?y] )  \u21E8      Space Term(?x) LTerm(?y)\n         LTerm(?x )  \u21E8      Space Term(?x)         \n         Term(?x )  \u21E8      Token(?x)\n         Term(?x )  \u21E8       /'[^']'/  : ?x\n         Term([VAR ?x] )  \u21E8      '?' Token(?x)\n         RHS([?x ?y] ) \u21E8   Item(?x)Space  RHS(?y)\n         RHS(NIL) \u21E8   \n         Item([STRING ?x] )  \u21E8    /'[^']'/  : ?x\n         Item([REGEX [?x ?y]] )  \u21E8  '/'  RegS(?x)'/'   Space  Matches(?y)\n         RegS(?x) \u21E8   / ([^\\/]|(?<=\\\\/))*/  : ?x\n         Matches([VAR ?x]) \u21E8  ':'  Space Term([VAR ?x])\n         Matches(NIL) \u21E8  \n         Space  \u21E8  /\\s+/\n         Space  \u21E8  \n        "^^<http://xrce.xerox.com/STX#Grammar> .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/2000/01/rdf-schema#label> "ReAL-code" .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/2000/01/rdf-schema#comment> "Resource oriented Action Language" .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/2000/01/rdf-schema#comment> "defines the syntactic structure of ReAL language"@en .
<http://xrce.xerox.com/ReAL#Code> <http://xrce.xerox.com/STX#axiom> "ReAL(?)"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/ReAL#Code> <http://xrce.xerox.com/STX#provides> "Symbol(?)"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/ReAL#Code> <http://xrce.xerox.com/STX#provides> "Pattern(?)"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/ReAL#Code> <http://xrce.xerox.com/STX#provides> "Iri(?)"^^<http://xrce.xerox.com/STX#BTree> .
<http://xrce.xerox.com/ReAL#Code> <http://xrce.xerox.com/STX#grammar> "\n                    ReAL( ?x  ) \u21E8    ROr(?x) \n                    ROr( [UNION ?x ?y]  ) \u21E8    REither(?x) 'UNION'   ROr(?y)\n                    ROr( ?x  ) \u21E8    REither(?x) \n                    REither( [OR ?x ?y]  ) \u21E8    RAnd(?x) 'OR'   REither(?y)\n                    REither( ?x  ) \u21E8    RAnd(?x) \n                    RAnd( [AND ?x ?y]  ) \u21E8    RBase(?x) 'AND'   RAnd(?y)\n                    RAnd( ?x  ) \u21E8    RBase(?x) \n                    RBase([TRANSACTION ?x] ) \u21E8  '['  ReAL(?x) ']'  \n                    RBase([SANDBOX ?x] ) \u21E8  '{'  ReAL(?x) '}'  \n                    RBase([ON ?g ?x] ) \u21E8   'ON' Space Pattern(?g) Space '{'  ReAL(?x) '}'  \n                    RBase([IN ?g ?x] ) \u21E8   'IN' Space Pattern(?g) Space '{'  ReAL(?x) '}'  \n                    RBase([NO ?x] ) \u21E8   'NO'  ReAL(?x)\n                    RBase([FIRST ?x] ) \u21E8   'FIRST'  ReAL(?x)\n                    RBase([LAST ?x] ) \u21E8   'LAST'  ReAL(?x)\n                    RBase([REPEAT ?x] ) \u21E8   'REPEAT'  ReAL(?x)\n                    RBase([REPEAT ?n ?x] ) \u21E8   'REPEAT' Integer(?n) ReAL(?x)\n                    RBase([REPEAT ?count ?x] ) \u21E8   'REPEAT' Var(?count) ReAL(?x)\n                    RBase([COUNT [?num ?x]] ) \u21E8   'COUNT'  Iteration(?num) ReAL(?x)\n                    Iteration([?q ?x] ) \u21E8   Qualifier(?q) Integer(?x)\n                    Iteration([?q ?x] ) \u21E8   Qualifier(?q) Var(?x)\n                    Qualifier(EQ)\u21E8  'EXACTLY'\n                    Qualifier(EQ)\u21E8  \n                    Qualifier(LT)\u21E8  'STRICTLY' Comp(LE)\n                    Qualifier(GT)\u21E8  'STRICTLY' Comp(GE)\n                    Qualifier(LE)\u21E8  'LESS THAN'\n                    Qualifier(GE)\u21E8  'GREATER THAN'\n                    RBase(?x ) \u21E8   '('  ReAL(?x)')' \n                    RBase(TRUE) \u21E8   'TRUE'  \n                    RBase(FALSE) \u21E8   'FALSE'  \n                    RBase(?x) \u21E8   RAction(?x) \n                    RAction([READ ?x]) \u21E8   RTriple(?x) \n                    RAction([PUT ?x]) \u21E8   '+' RTriple(?x) \n                    RAction([OR [PUT ?x] TRUE]) \u21E8   '++' RTriple(?x) \n                    RAction([TAKE ?x]) \u21E8   '-' RTriple(?x) \n                    RAction([INFER ?x]) \u21E8   '!' RTriple(?x) \n                    RAction([CALL ?x]) \u21E8   'CALL' RTriple(?x) \n                    RAction([SPAWN ?x]) \u21E8   'SPAWN' RTriple(?x) \n                    RAction([EXPAND ?x]) \u21E8   'EXPAND' RTriple(?x) \n                    RTriple(?p(?s, ?o)) \u21E8  Pattern(?p) '(' Pattern(?s)Space  ',' Space Item(?o) Space ')'\n                    RTriple(?p(?s, ?btree)) \u21E8  Pattern(?p) '(' Pattern(?s) ','  BTree(?btree) ')'\n                    RTriple(?p (?s , ?o | ?datatype)) \u21E8  Pattern(?p) '(' Pattern(?s) ','  Item(?o)'|'  Pattern(?datatype) ')'\n                    Item(?x)  \u21E8   Pattern(?x)\n                    Item(?x)  \u21E8   Atom(?x)\n                    Pattern(?x)  \u21E8   Iri(?x)\n                    Pattern(?x)  \u21E8   Var(?x)\n                    Iri(?x) \u21E8  Symbol(?prefix) ':'  Symbol(?suffix) {@primitive:DOWN([IRI ?prefix ?suffix], ?x) }\n                    Iri(?x) \u21E8  '<'  /[^\\s><]*/ : ?s '>' { DOWN([IRI ?s ''], ?x) }\n                    Symbol(?x) \u21E8  /[A-Za-z]\\w+/ :?symb  { DOWN([SYMBOL ?symb], ?x) }\n                    Atom(?x) \u21E8  Symbol(?x)\n                    Atom(?x) \u21E8  String(?x)\n                    Atom(?x) \u21E8  Number(?x)        \n                    String(?x) \u21E8  '\"' /[^\"]*/ : ?x '\"'\n                    String(?x) \u21E8  \"'\" /[^']*/ : ?x \"'\"\n                    Number(?x) \u21E8  Integer(?x)\n                    Number(?x) \u21E8  Decimal(?x)        \n                    Integer(?x)  \u21E8  /\\d+/ : ?s  {DOWN([INTEGER ?s], ?x)}\n                    Decimal(?x)  \u21E8  /\\d+\\.\\d+/ : ?s  {DOWN([DECIMAL ?s], ?x)}\n                    BTree([?x ?y]) \u21E8  '[ ' BItem(?x)   BTreeList(?y) Space  ']'  \n                    BTree([LIST ?x ]) \u21E8  '{ '  BList(?x) Space  '}'  \n                    BTreeList([?x ?y])\u21E8  BItem(?x)  BTreeList(?y)   |\n                    BTreeList(?x )\u21E8  BItem(?x)\n                    BList([?x ?y])\u21E8  BItem(?x) ','  BList(?y)   |\n                    BList([?x ?y])\u21E8  BItem(?x) '|'  BItem(?y)   |\n                    BList([?x NIL] )\u21E8  BItem(?x)\n                    BItem(?x) \u21E8  Space BTree(?x) \n                    BItem(?x) \u21E8   Space Item(?x)\n                    Space  \u21E8  /\\s+/\n                    Space  \u21E8  \n        "^^<http://xrce.xerox.com/STX#Grammar> .
<http://xrce.xerox.com/ReAL#Code> <http://www.w3.org/2000/01/rdf-schema#comment> "  EBNF Grammar (NB <string> denotes any lexical unit of type 'string')\n    \n         ReAL ::=  '[' ReAL ']'   |                       // transactional actions:  [ A ]  commits all actions resulting from evaluating A if A succeeds, otherwise, the context will stay unchanged\n                        '{' ReAL '}'   |                 // sandbox actions:  { A }  perform all actions possibly resulting from evaluating A, but always let the context unchanged (no triples added/deleted) in the current context\n                        'IN' Pattern '{' ReAL '}'   |                 // graph actions:   p { A }  perform all actions possibly resulting from evaluating A, but always let the context unchanged (no triples added/deleted)\n                        ReAL 'AND'  ReAL  |           // joint actions: (a1 AND a2) do a2 for each solution returned by a1 (each binding found for a1 is applied to a2 before evaluation)\n                        ReAL 'UNION'  ReAL  |            //  inclusive: (a1 UNION a2) do a2  even if a1 succeeds\n                        ReAL 'OR'  ReAL  |    //  exclusive: (a1 OR a2) do not try a2 if a1 succeeds\n                        'NO'  ReAL  |                    //  negation:  NO A  never changes the store, and is TRUE if A fails, FALSE if A succeeds\n                         'FIRST'  ReAL    |       //  just do one action: FIRST A perform only one action resulting from the evaluation of A if any (also yield only one binding, the first solution found)\n                         'LAST'  ReAL    |       //  just do one action: LAST A perform only one action resulting from the evaluation of A if any (also yield only one binding, the last solution found)\n                        'REPEAT'  ReAL     |   // REPEAT A  performs all possible actions A; TRUE if at least one action was performed (return the empty binding when finished)\n                        '(' ReAL ')'     |\n                        'TRUE'  |                       // yield the empty binding; do nothing\n                        'FALSE' |                       // does not yield anything ; do nothing\n                        Action\n                        \n          Action  ::=  '+' TriplePattern    |       //  +T add a triple T to the store: FALSE if the triple is already stored or not fully grounded (some variables have not been substituted)\n                            '++' TriplePattern    |    //  ++T is equivallent to (+T EITHER TRUE)\n                            '-' TriplePattern    |       //  find triples matching the pattern in the store, and withdraw them (yield a binding for each solution)\n                            'CALL' CallPattern      |    // invoke a synchronous action  (defined through a lrm:Action instance ; yield a binding for each solution)\n                            'SPAWN' CallPattern      |    // launch an asynchronous action  thread (defined through a lrm:ActionThread instance ; yield a unique empty binding if successful)\n                            'EXPAND' CallPattern   |    // invoke a substitution action  (the IRI of the call pattern should refer to a ReAL tamplate (real:Template instance); \n                                                                   // this one will be expanded by unifying its open variables with the signature; if the call pattern is defined at analysis time, this will be done statically )\n                            '!' TriplePattern      |    // invoke backward reasoning to find all solutions for the pattern (yield a binding for each solution)\n                            Iri '!' TriplePattern      |    // invoke backward reasoning with the tactic designated by the Iri component to find all solutions for the pattern (yield a binding for each solution)\n                            '$' <symbol>        |   create a fresh IRI, and yield the corresponding binding (e.g. $x will stream bindings for ?x variable)\n                            TriplePattern               // find a triple matching the pattern in the store, do nothing (yield a binding for each solution)\n                            \n          TriplePattern  ::=  Pattern '(' Pattern ',' Item ')'  |    // simple triple\n                            Pattern '(' Pattern ',' Item, '|' Pattern ')'  |   // triple with string and datatype as object\n                            Pattern '(' Pattern ',' BTree  ')'              // triple with binary tree as object (computed internally for compatible datatypes - as result of parsing)\n          CallPattern  ::=  Iri '(' ItemList?  ')'\n          Item ::= Pattern |  Atom\n          Pattern ::= Iri  |  Var \n          Iri ::=  <symbol> ':' <symbol>   \n          Var ::=  '?'  |   '?' <symbol>            # matches everything\n          Atom ::= <string> |  <number> |  <symbol>\n          ItemList  ::=  Item ',' ItemList  |  Item \n          BTree  ::= '[ ' BItem   BTreeList ']'  \n          BTreeList ::= BItem  BTreeList   |  BItem \n          BTree  ::= '{ '  BList '}'  \n          BList ::= BItem  \",\" BList   |  BItem  BList   |   '|' BItem  |  BItem \n          BItem ::= BTree | Item\n         " .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xrce.xerox.com/STX#Syntax> .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2000/01/rdf-schema#Datatype> .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/2000/01/rdf-schema#label> "ReAL-signature" .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/2000/01/rdf-schema#comment> "used to specify the signature of lrm:Action objects" .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/2000/01/rdf-schema#seeAlso> "EBNF grammar" .
<http://xrce.xerox.com/ReAL#Signature> <http://www.w3.org/2000/01/rdf-schema#comment> "  \n        // EBNF Grammar\n          ReALSignature ::= SVarList\n          SVarList  ::= Sign Var  ',' SVarList  |  Sign Var \n          Var ::=  '?'  |   '?' <symbol>            # matches everything\n          Var ::=   '?%'  |   '?%' <symbol>     # matches only IRI \n          Sign ::= '+' | '-'\n        " .
<http://xrce.xerox.com/ReAL#Signature> <http://xrce.xerox.com/STX#grammar> "\n          ReALSignature([LIST ?x]) \u21E8  Space  SList(?x) Space\n          SList ([?x ?y]) \u21E8  Symbol(?x) Space  ',' Space  SList(?y)  \n          SList ([?x NIL]) \u21E8  Symbol(?x)\n         " .
<http://xrce.xerox.com/ReAL#Signature> <http://xrce.xerox.com/STX#example> "x" .
<http://xrce.xerox.com/ReAL#Signature> <http://xrce.xerox.com/STX#example> "x, y, z" .
<http://xrce.xerox.com/ReAL#Specification> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> .
<http://xrce.xerox.com/ReAL#Specification> <http://www.w3.org/2000/01/rdf-schema#label> "real:Specification"@en .
<http://xrce.xerox.com/ReAL#Specification> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://xrce.xerox.com/LRM#Specification> .
<http://xrce.xerox.com/ReAL#Specification> <http://www.w3.org/2000/01/rdf-schema#comment> "Used to characterizes the behavior of ReAL code"@en .
<http://xrce.xerox.com/ReAL#invariant> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> .
<http://xrce.xerox.com/ReAL#invariant> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://xrce.xerox.com/LRM#invariant> .
<http://xrce.xerox.com/ReAL#invariant> <http://www.w3.org/2000/01/rdf-schema#comment> "should hold before and after the chunk of ReAL code is executed "@en .
<http://xrce.xerox.com/ReAL#invariant> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#invariant> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Specification> .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://xrce.xerox.com/LRM#specifiedBy> .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/2000/01/rdf-schema#comment> "required to hold before the chunk of ReAL code is executed (similar to the 'before' assertion of Hoare Logic)"@en .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/2000/01/rdf-schema#seeAlso> <https://en.wikipedia.org/wiki/Hoare_logic> .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#before> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Specification> .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://xrce.xerox.com/LRM#specifiedBy> .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/2000/01/rdf-schema#comment> "should always hold after the chunk of ReAL code is executed, assuming that real:before (if any) holds, as well as does the invariant (similar to the 'after' assertion of Hoare Logic)"@en .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/2000/01/rdf-schema#seeAlso> <https://en.wikipedia.org/wiki/Hoare_logic> .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#after> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Specification> .
<http://xrce.xerox.com/ReAL#Template> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> .
<http://xrce.xerox.com/ReAL#Template> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://xrce.xerox.com/LRM#Description> .
<http://xrce.xerox.com/ReAL#Template> <http://www.w3.org/2000/01/rdf-schema#comment> "Used to define a block of ReAL instructions. Open variables, if any may be specified using the open-variables property ."@en .
<http://xrce.xerox.com/ReAL#variables> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/ReAL#variables> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#FunctionalProperty> .
<http://xrce.xerox.com/ReAL#variables> <http://www.w3.org/2000/01/rdf-schema#comment> "used to specify explicitly the open variables of the ReAL code template" .
<http://xrce.xerox.com/ReAL#variables> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#variables> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Signature> .
<http://xrce.xerox.com/ReAL#code> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> .
<http://xrce.xerox.com/ReAL#code> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#FunctionalProperty> .
<http://xrce.xerox.com/ReAL#code> <http://www.w3.org/2000/01/rdf-schema#comment> "ReAL code to be used as a substitution pattern" .
<http://xrce.xerox.com/ReAL#code> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#code> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Code> .
<http://xrce.xerox.com/ReAL#verifies> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> .
<http://xrce.xerox.com/ReAL#verifies> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://xrce.xerox.com/LRM#specifiedBy> .
<http://xrce.xerox.com/ReAL#verifies> <http://www.w3.org/2000/01/rdf-schema#domain> <http://xrce.xerox.com/ReAL#Template> .
<http://xrce.xerox.com/ReAL#verifies> <http://www.w3.org/2000/01/rdf-schema#range> <http://xrce.xerox.com/ReAL#Specification> .
